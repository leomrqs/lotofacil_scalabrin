#!/usr/bin/env python3
# -*- coding: utf-8 -*
# AUTOR: Leonardo dos Santos Marques
"""
package_zip.py ‚Äî consolida todo o material do projeto Lotof√°cil
em **lotofacil_submission.zip** (raiz).

Conte√∫do inclu√≠do
-----------------
‚Ä¢ Scripts‚Äëchave *.py  (gerador, benchmark, programas¬†2‚Äë5, verificador, custo, este pacote)  
‚Ä¢ Documentos de topo¬†‚Äì README, REPORT, MakeFile  
‚Ä¢ Pastas de resultados: resultados/, prog2_saida/, ‚Ä¶, prog7_saida/  
‚Ä¢ PDFs que existirem em docs/

Regra de ouro: se o ZIP j√° existir, √© **apagado** antes de ser recriado ‚Äì
evita submiss√µes corrompidas.

Uso
----
    python package_zip.py
"""
from pathlib import Path
from zipfile import ZipFile, ZIP_DEFLATED
import datetime

ROOT = Path(__file__).resolve().parent
ZIP_NAME = "lotofacil_submission.zip"
OUT_ZIP = ROOT / ZIP_NAME

# ------------------------------------------------------------
#  Cont√©m todos os scripts necess√°rios para reproduzir resultados
# ------------------------------------------------------------
CODE_FILES = [
    "lotogen.py", "bench.py",
    "programa2.py", "programa3.py", "programa4.py", "programa5.py",
    "verify_all.py", "calcular_custo_sb.py", "package.py"
]

DOC_FILES = [
    "README.md", "REPORT.md", "MakeFile",  # uso a grafia encontrada no repo
]

RESULT_DIRS = [
    "resultados", "prog2_saida", "prog3_saida",
    "prog4_saida", "prog5_saida", "prog7_saida"
]

PDF_DIR = ROOT / "docs"      # incluir quaisquer PDFs do relat√≥rio

# ------------------------------------------------------------

def add(z: ZipFile, path: Path, arc_prefix: str = "") -> None:
    """Adiciona arquivo / diret√≥rio recursivamente no zip."""
    if path.is_dir():
        for sub in path.iterdir():
            add(z, sub, arc_prefix + path.name + "/")
    else:
        arcname = arc_prefix + path.name
        z.write(path, arcname)
        print(f"  + {arcname}")

# ------------------------------------------------------------

def main() -> None:
    if OUT_ZIP.exists():
        OUT_ZIP.unlink()
        print("‚ÑπÔ∏è  ZIP anterior removido.")

    with ZipFile(OUT_ZIP, "w", ZIP_DEFLATED) as z:
        print("üì¶  Incluindo scripts Python‚Ä¶")
        for fname in CODE_FILES:
            fp = ROOT / fname
            if fp.exists():
                add(z, fp)
            else:
                print(f"  ! {fname} n√£o encontrado (ok se ainda n√£o implementado).")

        print("üìÑ  Incluindo documentos de topo‚Ä¶")
        for fname in DOC_FILES:
            fp = ROOT / fname
            if fp.exists():
                add(z, fp)
            else:
                print(f"  ! {fname} ausente.")

        print("üìÇ  Incluindo pastas de resultados‚Ä¶")
        for d in RESULT_DIRS:
            dp = ROOT / d
            if dp.exists():
                add(z, dp)
            else:
                print(f"  ‚Ä¢ {d} ainda n√£o existe ‚Äî ser√° ignorado.")

        if PDF_DIR.exists():
            print("üìë  Incluindo PDFs em docs/ ‚Ä¶")
            for pdf in PDF_DIR.glob("*.pdf"):
                add(z, pdf, "docs/")

    size_mb = OUT_ZIP.stat().st_size / (1024 * 1024)
    stamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    print(f"\n‚úÖ {ZIP_NAME} criado ({size_mb:.1f}¬†MB) ‚Äì {stamp}")

if __name__ == "__main__":
    main()
